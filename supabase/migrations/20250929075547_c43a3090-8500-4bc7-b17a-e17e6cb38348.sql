-- Additional RPC Functions for BEO Management

CREATE OR REPLACE FUNCTION public.add_room_layout(
  p_event_id uuid,
  p_space_name text,
  p_layout_type text,
  p_capacity integer DEFAULT NULL,
  p_setup_notes text DEFAULT NULL,
  p_setup_time timestamptz DEFAULT NULL,
  p_breakdown_time timestamptz DEFAULT NULL,
  p_special_requirements text DEFAULT NULL
)
RETURNS uuid
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  layout_id uuid;
BEGIN
  -- Validate permissions
  IF NOT (
    has_management_role(auth.uid(), 'admin'::management_role) OR
    has_management_role(auth.uid(), 'sales'::management_role) OR
    has_management_role(auth.uid(), 'ops'::management_role)
  ) THEN
    RAISE EXCEPTION 'Insufficient permissions to add room layouts';
  END IF;

  -- Insert room layout
  INSERT INTO public.event_room_layouts (
    event_id, space_name, layout_type, capacity, setup_notes, 
    setup_time, breakdown_time, special_requirements
  ) VALUES (
    p_event_id, p_space_name, p_layout_type, p_capacity, p_setup_notes, 
    p_setup_time, p_breakdown_time, p_special_requirements
  ) RETURNING id INTO layout_id;

  -- Log audit
  PERFORM public.log_audit_entry(
    p_event_id,
    'event_room_layout',
    'add_room_layout',
    auth.uid(),
    jsonb_build_object(
      'layout_id', layout_id,
      'space_name', p_space_name,
      'layout_type', p_layout_type
    )
  );

  RETURN layout_id;
END;
$$;

CREATE OR REPLACE FUNCTION public.add_equipment_item(
  p_event_id uuid,
  p_category text,
  p_item_name text,
  p_quantity integer DEFAULT 1,
  p_specifications text DEFAULT NULL,
  p_delivery_time timestamptz DEFAULT NULL,
  p_collection_time timestamptz DEFAULT NULL,
  p_hire_cost numeric DEFAULT NULL,
  p_supplier text DEFAULT NULL,
  p_contact_details text DEFAULT NULL,
  p_setup_instructions text DEFAULT NULL
)
RETURNS uuid
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  equipment_id uuid;
BEGIN
  -- Validate permissions
  IF NOT (
    has_management_role(auth.uid(), 'admin'::management_role) OR
    has_management_role(auth.uid(), 'sales'::management_role) OR
    has_management_role(auth.uid(), 'ops'::management_role)
  ) THEN
    RAISE EXCEPTION 'Insufficient permissions to add equipment items';
  END IF;

  -- Insert equipment item
  INSERT INTO public.event_equipment (
    event_id, category, item_name, quantity, specifications, 
    delivery_time, collection_time, hire_cost, supplier, 
    contact_details, setup_instructions
  ) VALUES (
    p_event_id, p_category, p_item_name, p_quantity, p_specifications, 
    p_delivery_time, p_collection_time, p_hire_cost, p_supplier, 
    p_contact_details, p_setup_instructions
  ) RETURNING id INTO equipment_id;

  -- Log audit
  PERFORM public.log_audit_entry(
    p_event_id,
    'event_equipment',
    'add_equipment_item',
    auth.uid(),
    jsonb_build_object(
      'equipment_id', equipment_id,
      'category', p_category,
      'item_name', p_item_name,
      'quantity', p_quantity
    )
  );

  RETURN equipment_id;
END;
$$;

CREATE OR REPLACE FUNCTION public.generate_beo_pdf(p_event_id uuid)
RETURNS uuid
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  beo_version_id uuid;
  next_version_no integer;
BEGIN
  -- Validate permissions
  IF NOT (
    has_management_role(auth.uid(), 'admin'::management_role) OR
    has_management_role(auth.uid(), 'sales'::management_role) OR
    has_management_role(auth.uid(), 'ops'::management_role)
  ) THEN
    RAISE EXCEPTION 'Insufficient permissions to generate BEO';
  END IF;

  -- Get next version number
  SELECT COALESCE(MAX(version_no), 0) + 1 
  INTO next_version_no
  FROM public.event_beo_versions 
  WHERE event_id = p_event_id;

  -- Insert BEO version record (PDF will be generated by edge function)
  INSERT INTO public.event_beo_versions (
    event_id, version_no, generated_by
  ) VALUES (
    p_event_id, next_version_no, auth.uid()
  ) RETURNING id INTO beo_version_id;

  -- Log audit
  PERFORM public.log_audit_entry(
    p_event_id,
    'beo_generation',
    'generate_beo_pdf',
    auth.uid(),
    jsonb_build_object(
      'beo_version_id', beo_version_id,
      'version_no', next_version_no
    )
  );

  RETURN beo_version_id;
END;
$$;